# Project specific configuration used by Python libraries

[flake8]
# The jenkins violations plugin can read the pylint format.
format=pylint

# Measure cyclomatic complexity.
# http://en.wikipedia.org/wiki/Cyclomatic_complexity#Limiting_complexity_during_development
# The current value is set so that the build doesn't fail. At least we won't
# make the software more complex.
# We should target 10.
max-complexity = 10

max-line-length = 120
ignore = W503

# .svn,CVS,.bzr,.hg,.git,__pycache__:
#   default excludes
# venv/:
#  third party libraries are all stored in venv - so we don't want to
#  check them for style issues.
# get-pip.py:
#  a public file coming directly from upstream.
# salt/var/cache/:
#   used by salt to cache all module files when run in non-root mode. This
#   includes upstream modules that are not complient with coding style.
exclude=.svn,CVS,.bzr,.hg,.git,__pycache__,venv,get-pip.py,salt/var/cache/,src/*

# flake8-tidy-imports rules
banned-modules =
  collections.namedtuple = Use `typing.NamedTuple` or make a class
  dateutil.parser = Use `ciso8601` instead
  flask.ext.restful = Use `flask_restful instead`
  flask.ext.script = Use `flask_script instead`
  gevent.spawn = Use `spawn_with_context`
  haversine = Use `from fast_distance import haversine`
  logging = Use `from lyft_logging import logging`
  lyft.api_client = Use `lyft_requests`
  lyft.api_exceptions = Use `lyft_requests`
  lyft.gevent = Use `gevent`
  lyft.http_status_codes = Use `lyft_requests.http_status_codes`
  lyft.logging = Use `lyft_logging.logging`
  lyft.mixins.Loggable = Use `lyft_logging.mixin.Loggable`
  lyft.mixins.Statsable = Use `lyft_stats.mixin.Statsable`
  lyft.regioncfg = Use `lyft_regions_client`
  lyft.regions_client = Use `lyft_regions_client`
  lyft.requests = Use `lyft_requests`
  lyft.service_area = Use `lyft_regions_client`
  lyft.settings = Use `lyft_settings`
  lyft.stats = Use `lyft_stats`
  lyft_logging.logging.to_log = Use kv= log syntax
  unittest = Use `pytest`

[pep8]
max-line-length = 120

[coverage:report]
fail_under = 60

# Template from https://coverage.readthedocs.io/en/latest/config.html
# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:

    # Don't complain about imports for mypy type checking
    if TYPE_CHECKING

[coverage:html]
directory = build/coverage/
title = "vehiclemetadata Coverage"

[coverage:xml]
output = build/coverage.xml

[coverage:run]
omit =
    app/scripts/bulk_create_vehicles.py
    app/scripts/manager/create_*_table.py
    app/scripts/manager/load_dev_*.py
    app/scripts/run_cron.py
    app/scripts/dynamo_json_to_csv.py

[mypy]
disallow_untyped_defs = true
strict_optional = true
warn_no_return = true
warn_unused_ignores = true

[tool:pytest]
markers =
    parametrize
    unit_legacy
lyft_analytics_coverage_omit_not_sent = "vehiclemetadata_vehicle_updated,vehiclemetadata_modelname_updated,vehiclemetadata_carselect_updated"
